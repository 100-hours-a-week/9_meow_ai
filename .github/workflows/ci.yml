name: LLM API CI & CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
      - 'release/**'
      - main
  pull_request:
    branches:
      - develop
      - 'release/**'
      - main

jobs:
  build-and-test:
    name: ðŸ¤– Build & Lint
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      github.event_name == 'pull_request' &&
      github.base_ref == 'develop' &&
      contains(github.head_ref, 'feat')
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Add project root to PYTHONPATH
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
      - name: Lint / Syntax Check
        run: python -m pyflakes ai_server
      - name : Run Unit Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

  integration:
    name: ðŸ”— AI Server Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: >
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      github.event_name == 'pull_request' &&
      contains(github.base_ref, 'release') &&
      github.head_ref == 'develop'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Start FastAPI
        run: |
          uvicorn ai_server.main:app --host 0.0.0.0 --port 8000 &
      - name: Wait for Health (root)
        run: |
          for i in {1..10}; do
            curl -sf http://localhost:8000/ && exit 0
            sleep 5
          done
          exit 1

  deploy:
    name: ðŸš€ Deploy AI Server
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/develop' &&
      !contains(github.event.head_commit.message, '[skip cd]') &&
      !contains(github.event.head_commit.message, '[cd skip]')
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ENV & App Names
        id: meta
        shell: bash
        run: |
          branch=${GITHUB_REF#refs/heads/}
          if [[ "$branch" == "develop" ]]; then
            deploy_env=dev
          elif [[ "$branch" =~ ^release/ ]]; then
            deploy_env=release
          elif [[ "$branch" == "main" ]]; then
            deploy_env=prod
          else
            deploy_env=skip
          fi

          service_name=9_meow_ai
          registry="${{ secrets.ECR_REGISTRY }}"; registry="${registry%/}"
          image_uri="${registry}/${deploy_env}/${service_name}"

          echo "ENV=${deploy_env}"                             >> $GITHUB_ENV
          echo "SERVICE=${service_name}"                       >> $GITHUB_ENV
          echo "REGISTRY=${registry}"                          >> $GITHUB_ENV
          echo "IMAGE_URI=${image_uri}"                        >> $GITHUB_ENV
          echo "APP_NAME=meow-${deploy_env}-deployment"        >> $GITHUB_ENV
          echo "DG_NAME=meow-${deploy_env}-deployment_group"   >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache buildx layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.ENV }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.ENV }}-

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_URI }}:${{ github.sha }}
            ${{ env.IMAGE_URI }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Trigger CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.APP_NAME }} \
            --deployment-group-name ${{ env.DG_NAME }} \
            --s3-location bucket=${{ secrets.DEPLOY_BUCKET }},key=${{ env.ENV }}/deploy-bundle.zip,bundleType=zip
