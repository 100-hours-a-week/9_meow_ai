name: LLM API CI & CD

on:
  push:
    branches:
      - develop
      - 'release/**'
      - main
  pull_request:
    branches:
      - develop
      - 'release/**'
      - main

jobs:
  build-and-test:
    name: ðŸ¤– Build & Lint
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && github.event_name == 'pull_request'
      && github.base_ref == 'develop'
      && contains(github.head_ref, 'feat')
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint / Syntax Check
        run: python -m pyflakes ai_server

  integration:
    name: ðŸ”— AI Server Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: >
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && github.event_name == 'pull_request'
      && contains(github.base_ref, 'release')
      && github.head_ref == 'develop'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI
        run: uvicorn ai_server.main:app --host 0.0.0.0 --port 8000 &

      - name: Wait for Health (root)
        run: |
          for i in {1..10}; do
            curl -sf http://localhost:8000/ && exit 0
            sleep 5
          done
          exit 1

  deploy:
    name: ðŸš€ Deploy AI Server
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip cd]')
      && !contains(github.event.head_commit.message, '[cd skip]')
      &&  github.event_name == 'push' 
      && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID_FOR_ACTIONS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_ACTIONS }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine ECR Namespace
        id: ns
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH" == "develop" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [[ "$BRANCH" =~ ^release/ ]]; then
            echo "ENV=release" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
          else
            echo "ENV=skip" >> $GITHUB_ENV
          fi

      - name: Build, Tag & Push to ECR
        if: env.ENV != 'skip'
        run: |
          SERVICE=9_meow_ai
          IMAGE_URI=${{ secrets.ECR_REGISTRY }}/${ENV}/${SERVICE}
          docker build --platform linux/amd64 -t $IMAGE_URI:latest .
          docker push $IMAGE_URI:latest
      - name: SSH & Deploy to Dev EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            /home/ubuntu/meow/deployment/update.sh

