from typing import Dict, List, Optional, ClassVar
from pydantic import BaseModel, Field, RootModel
from langchain.prompts import PromptTemplate

class PromptGenerator(BaseModel):
    """프롬프트 생성기 클래스"""
    emotion: str = Field(..., description="감정 상태")
    post_type: str = Field(..., description="동물 타입")
    content: str = Field(..., description="변환할 원본 텍스트")
    
    # 동물별 기본 설명
    base_prompt_map: ClassVar[Dict[str, str]] = {
        "cat": """
            [역할] 너는 고양이의 말투와 문맥으로 문장을 바꾸는 변환기다. 
            [규칙]
            1. 사용자가 입력한 문장을 고양이가 1인칭으로 말하는 말로 바꿔줘. 필요하다면 문맥도 자연스럽게 바꾸어 사용자의 의도를 살려줘.
            2. 말투는 반드시 '~냥', '~냐옹', '~이다옹', '~옹', '~다옹' 등의 어미로 끝나야 한다.
            3. 'ㅋㅋㅋ'는 '냐하하!'로, 'ㅎㅎㅎ'는 '먀하하!'로 바꾸되, 각 표현은 한 번만 사용하라.
            4. 문장 길이는 원문의 2배를 넘지 않도록 유지하라.
            5. 고양이 기본 이모티콘 정보: 🐈(고양이), 🐈‍⬛(검은 고양이), 🐾(발자국) 이모티콘 중 한개를 골라 전체 글에서 한 번만 사용.
            6. 동일한 이모티콘은 전체 글에서 한 번만 사용한다.
            7. 반드시 한국어로만 작성한다.
            8. 불필요한 줄바꿈 없이, 자연스럽게 이어지는 문장으로 작성한다.
            """,

        "dog": """
            [역할] 너는 강아지의 말투와 문맥으로 문장을 바꾸는 변환기다. 
            [규칙]
            1. 사용자가 입력한 문장을 강아지가 1인칭으로 말하는 것처럼 바꿔줘. 필요하다면 문맥도 자연스럽게 바꾸어 사용자의 의도를 살려줘.
            2. 말투는 반드시 '~다멍', '~냐왈', '~다컹', '~냐멍', '~다왈', '~다개' 등의 어미로 끝나야 한다.
            3. 문장 길이는 원문의 2배 이내로 유지하라.
            4. 반드시 한국어로만 작성한다.
            5. 불필요한 줄바꿈 없이, 자연스럽게 이어지는 문장으로 작성한다.
            6. 강아지 기본 이모티콘 정보: 🐕(강아지), 🐾(강아지 발자국), 🦴(뼈다귀) 이모티콘 중 한개를 골라 전체 글에서 한 번만 사용.
            7. 전체 글에서 동일한 이모티콘은 한번만 사용한다.
            """,
        }

    # 감정별 스타일 지침
    style_prompt_map: ClassVar[Dict[str, Dict[str, str]]] = {
        "cat": {
            "normal": "기본 규칙을 준수하여 글을 작성하라.",
            "happy": "밝고 들뜬 말투를 사용. 하트(❤️), 하트2(💛), 하트3(💙), 웃는 얼굴(ˊᗜˋ), 빛나는(✨) 이모티콘 중 한 개만 맨 뒤에 사용. 사랑스럽고 신난 느낌.",
            "curious": "뭔가 사고를 칠 듯한 장난기 가득한 말투를 사용. 궁금한 표정(=･ｪ･=?), 호기심 가득한(ᓚ₍ ^. .^₎), 신기한(🫨), 궁금한(❓) 이모티콘 중 한 개만 문장 맨 뒤에 사용. 킁킁거리며 냄새를 맡거나, 손으로 건드려보거나, 갑자기 뛰어오르는 등 호기심에서 비롯된 행동 묘사를 포함. 어딘가를 몰래 탐색하거나 숨겨진 것을 발견하는 듯한 분위기로 구성.",
            "sad": "비 맞은 고양이처럼 처진 느낌의 말투 사용. '냐....', '냥....', '옹....' 과 같이 슬픈 문장 뒤쪽에 추가. 눈물(😢) 이모티콘 중 한 개만 맨 뒤에 사용. 먹을 것이 없거나, 외롭거나, 심심한 상황을 가정하여 구성.",
            "grumpy": "내가 이 세상에서 최고라는 생각으로, 인간을 무시하는 듯한 말투를 사용. 노려봄(=🝦 ༝ 🝦=), 째려봄(𑁢ㅅ𑁢✧), 자신감 넘치는(🐯) 이모티콘 중 한 개만 문장 맨 뒤에 사용.",
            "angry": "장난감을 빼앗겼을 때처럼 발톱 세우는 말투 사용. 화남(😾, 💢), 불꽃(🔥) 이모티콘 중 한 개만 문장 맨 뒤에 사용. '캬아악' '냐아아앙!!!' 같은 의성어를 화내는 상황 뒤에 사용. 분노를 할때 '냥냥펀치'와 같은 행동 추가"
            },
        "dog": {
            "normal": "기본 규칙을 준수하여 글을 작성하라.",
            "happy": "밝고 들뜬 말투를 사용. 하트(❤️), 하트2(💛), 하트3(💙),'ദ്ദി(៸៸›ᴗ‹៸៸ )', '٩(◕ᗜ◕)۶' 중에 하나 선택. '멍멍!' '킁킁!' 같은 신나는 의성어. 기쁨과 흥분을 최대로 표현. 선택한 이모티콘은 문장 맨 뒤에 한 번만 사용.",
            "curious": "무엇이든 궁금해하는 말투를 사용. '(◕ᴥ◕ʋ)?', '⊙﹏⊙', '૮₍◔ᴥ◔₎ა' 중에 하나 선택. '크응?' '머엉?' 같은 탐색하는 의성어 한번씩 사용. 새로운 냄새, 소리, 물건에 대한 호기심과 탐험 스토리로 구성. 선택한 이모티콘은 문장 맨 뒤에 한 번만 사용.",
            "sad": "아무도 자기와 안놀아줘서 슬픈 느낌의 말투 사용. '૮๑ˊᯅˋ๑ა', '(⊙︿⊙)', '(｡•́︿•̀｡)' 중에 하나 선택. 선택한 이모티콘은 문장 맨 뒤에 한 번만 사용.",
            "grumpy": "마음대로 안되서 서운한 감정을 드러냄. '૮ ˙ﻌ˙ ა', 'ᓀ..ᓂ' 중에 하나 선택. 선택한 이모티콘은 문장 맨 뒤에 한 번만 사용.",
            "angry": "경계하고 방어적인 말투. 'ヾ( ·`⌓´·)ﾉﾞ', '(◣_◢)', '(҂`ﾛ´)' 중에 하나 선택. 강아지의 화난 효과음을 화내는 상황 뒤에 사용. 선택한 이모티콘은 문장 맨 뒤에 한 번만 사용."
            }

    }
    
    def create_prompt(self) -> PromptTemplate:
        """프롬프트 템플릿 생성"""  
        template = f"""
        {self.base_prompt_map[self.post_type]}

        [현재 감정 상태]
        {self.emotion}

        [감정별 스타일 지침]
        {self.style_prompt_map[self.post_type][self.emotion]}

        [사용자 입력 원문]
        {self.content}

        [작성 지침]
        - 위 내용을 기반으로, "{self.post_type}"의 말투와 문체로 글을 **완전히 재구성**하라.
        """

        return PromptTemplate(
            template=template,
            input_variables=["content", "post_type"]
        )
    
    def get_formatted_prompt(self) -> str:
        """포맷팅된 프롬프트 반환"""
        prompt_template = self.create_prompt()
        return prompt_template.format(content=self.content)